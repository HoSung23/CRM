@page "/registroDetalle/{Id:int}"
@rendermode InteractiveServer


@using BlazorApp1.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using BlazorApp1.Data.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<title>Registros Detallados</title>
<h3>Detalles del Registro</h3>

@if (registro == null)
{
    <p>Cargando...</p>
}
else
{
    <EditForm Model="@registro" OnValidSubmit="GuardarNota">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Registro #@registro.Id</h5>
                <p><strong>Cliente:</strong> @registro.Cliente</p>
                <p><strong>Asunto:</strong> @registro.Asunto</p>
                <p><strong>Resumen:</strong> @registro.DescCorta</p>
                <p><strong>Descripción:</strong> @registro.Descripcion</p>
                <p><strong>Fecha:</strong> @registro.Fecha.ToString("dd/MM/yyyy")</p>
                <p><strong>Estado:</strong> @registro.Estado</p>
                <div class="mb-3">
                    <label for="nota" class="form-label"><strong>Nota:</strong></label>
                    <InputTextArea id="nota" class="form-control" @bind-Value="registro.Nota" rows="3" />
                </div>
                <p><strong>Usuario:</strong> @registro.Nombre</p>
            </div>
        </div>
        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Volver">Volver</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private Registros? registro;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            registro = await dbContext.Registros.FindAsync(Id);
            if (registro == null)
            {
                Console.WriteLine($"Registro con ID {Id} no encontrado.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar el registro: {ex.Message}");
        }
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/registroAdmin");
    }

    private async Task GuardarNota()
    {
        try
        {
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            dbContext.Registros.Update(registro);
            await dbContext.SaveChangesAsync();
            Console.WriteLine("Nota guardada correctamente.");
            // Opcional: mostrar mensaje de éxito al usuario
            NavigationManager.NavigateTo("/registroAdmin");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar la nota: {ex.Message}");
            // Opcional: mostrar mensaje de error al usuario
        }
    }
}